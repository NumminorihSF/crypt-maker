{"name":"Crypt-maker","tagline":"Make encrypted message and decrypt them by node.js or io.js crypto module","body":" \r\nUse node.js or io.js crypt api for make encrypted messages. Works sync.\r\n\r\nInstall with:\r\n\r\n    npm install crypt-maker\r\n\r\n\r\n## Usage\r\n\r\nSimple example:\r\n\r\n```js\r\n\r\n    var CM = require(\"crypt-maker\");\r\n    var crypt = new CM({key: 'some-crypt-key'});\r\n\r\n    var messageJSON = {\r\n        header: {\r\n            some: 'header',\r\n            another: 'awesome header'\r\n        },\r\n        body: {\r\n            time: '11:22',\r\n            whisp: 'do this' \r\n        }\r\n    };\r\n    \r\n    var encrypted = crypt.makeMessage(messageJSON);\r\n    \r\n    console.log(encrypted);\r\n    //{\"some\":\"header\",\"another\":\"awesome header\"}\r\n    //a4d355b6522d3d69baca7ff06310f24c992b0fa83ca6ae43e0f7e83340a001e618af6e48e1fb9fca63181acc8162f520\r\n    \r\n    var decrypted = {header: crypt.getHeader(encrypted), body: crypt.getBody(encrypted)};\r\n    console.log(decrypted);\r\n    //{ header: { some: 'header', another: 'awesome header' },\r\n    //  body: { time: '11:22', whisp: 'do this' } }\r\n    var decryptedAll = crypt.parseMessage(encrypted);\r\n    console.log(decryptedAll);\r\n```\r\n\r\n\r\n# Methods\r\n\r\n## CM.createClient()\r\n\r\nIs the same as:\r\n\r\n## new CM()\r\n\r\n* `CM.createCryptMaker({key: '123'}) = crypt.createCryptMaker({key: '123', algorithm:'aes123', EOM:'\\r\\n\\r\\n', SOP:'\\r\\n'})`\r\n\r\nIf `algorithm !== 'no'` and no key passed to constructor - throws error\r\n\r\n* `key`: key to crypt strings\r\n* `algorithm`: which algorithm use to encrypt messages. Default `aes128`\r\n* `EOM`: which symbols indicate ends of messages. Default `\\r\\n\\r\\n`\r\n* `SOP`: which symbols indicate separate between header and message. Default `\\r\\n`\r\n* `headerEncrypted`: `true` if header should encrypted. Default `false`\r\n\r\n## cm.decrypt(message) \r\n\r\nReturn decrypted string. If `algorithm == 'no'` returns `message`.\r\n\r\nParameters:\r\n\r\nName      |Type    |Description\r\n----------|--------|-----------\r\n`message` |\tstring | \t\r\n\r\n\r\n## cm.encrypt(message)\r\n\r\nReturn encrypted string. If `algorithm == 'no'` returns `message`.\r\n\r\nParameters:\r\n\r\nName \t  | Type   | Description\r\n----------|--------|------------\r\n`message` | string | \t\r\n\r\n\r\n## cm.format(data)\r\n\r\nMake string from JSON\r\n\r\nParameters:\r\n\r\nName    | Type                 | Description\r\n--------|----------------------|-------------\r\n`data` \t| any, except function |\r\n\r\n## cm.parse(data)\r\nUnformat message back to Object | Boolean | String | Number\r\n\r\nParameters:\r\n\r\nName \t| Type | Description\r\n--------|------|------------\r\ndata \t|string| \t\r\n\r\n\r\n## cm.getBody(message)\r\n\r\nGet body from encrypted message. If `typeof message == undefined || message length == 0` \r\nor no SOP at message, returns `null`. Else if can't parse message - return `null`.\r\n\r\nParameters:\r\n\r\nName \t| Type   |\tDescription\r\n--------|--------|--------------------\r\nmessage | string |\tencrypted message\r\n\r\n\r\n## cm.getBodyAsync(message, callback)\r\n\r\nSame as sync version. But doesn't return `null`, and returns error objects.\r\n**Is not realy async!**\r\n\r\nParameters:\r\n\r\nName \t | Type    | Description\r\n---------|---------|------------------\r\nmessage  | string  | encrypted message\r\ncallback | function| \t\r\n\r\n\r\n## cm.getHeader(message)\r\n\r\nGet header from encrypted message. If `typeof message == undefined || message.length == 0` \r\nor no SOP at message, returns `null`. Else if can't parse message - return `null`.\r\n\r\nParameters:\r\n\r\nName \t| Type   |\tDescription\r\n--------|--------|--------------------\r\nmessage | string |\tencrypted message\r\n\r\n\r\n## cm.getHeaderAsync(message, callback)\r\n\r\nSame as sync version. But doesn't return `null`, and returns error objects.\r\n**Is not realy async!**\r\n\r\nParameters:\r\n\r\nName \t | Type    | Description\r\n---------|---------|------------------\r\nmessage  | string  | encrypted message\r\ncallback | function| \t\r\n\r\n\r\n## cm.makeMessage(message)\r\n\r\nMake encrypt message form object.\r\n\r\nParameters:\r\n\r\nName          |\tType           |\tDescription\r\n--------------|----------------|----------------\r\nmessage       | Object         | Properties\t\r\nmessage.header|\tObject, string |\r\nmessage.body  |\tObject, string |\t\r\n\r\n\r\n\r\n## cm.makeMessageAsync(message, callback)\r\n\r\nSame as sync version. But doesn't return `null`, and returns error objects.\r\n**Is not realy async!**\r\n\r\n\r\nParameters:\r\n\r\nName          |\tType           |\tDescription\r\n--------------|----------------|----------------\r\nmessage       | Object         | Properties\t\r\nmessage.header|\tObject, string |\r\nmessage.body  |\tObject, string |\t\r\ncallback      | function       | \r\n\r\n\r\n\r\n\r\n## cm.parseMessage(message)\r\n\r\nDecrypt message form object. Returns Object `{header: ... , body: ... }`\r\n\r\nParameters:\r\n\r\nName     |\tType  |\tDescription\r\n---------|--------|----------------\r\nmessage  | string | \r\n\r\n\r\n## cm.splitMessages(raw)\r\n\r\nSplits many messages to array of messages.\r\n\r\nParameters:\r\n\r\nName \t| Type   |\tDescription\r\n--------|--------|---------------\r\nraw \t| string |\traw messages string\r\n\r\nReturns:\r\nreturn `[]` if no EOMs at the end of raw strings\r\n\r\n\r\n## cm.splitMessagesAsync(raw)\r\n\r\nSplits many messages to array.\r\n\r\nParameters:\r\n\r\nName \t | Type   | \tDescription\r\n---------|--------|---------------\r\nraw \t |string  | \tmessages\r\ncallback |function| \t\r\n\r\nReturns:\r\nreturn `[]` if no EOMs at the end of raw strings\r\n\r\n## cm.addEom(string)\r\n\r\nSplits many messages to array.\r\n\r\nParameters:\r\n\r\nName \t | Type   | \tDescription\r\n---------|--------|---------------\r\nstring \t |string  | \tone encrypted message\r\n\t\r\n\r\nReturns:\r\nreturn string+EOM symbol.\r\n\r\n\r\n\r\n# LICENSE - \"MIT License\"\r\n\r\nCopyright (c) 2015 Konstantine Petryaev\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}